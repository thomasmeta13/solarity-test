"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.overrideTailwindClasses = void 0;
var lodash_1 = __importDefault(require("lodash"));
var defaultOptions = {
    prefix: '',
    tailwindProperties: {},
};
var isEqualsSorted = function (x, y) {
    return lodash_1.default.isEqual(lodash_1.default.sortBy(x), lodash_1.default.sortBy(y));
};
var filterCssVariables = function (classNames) {
    return classNames === null || classNames === void 0 ? void 0 : classNames.filter(function (c) { return !c.startsWith('--'); });
};
var doMediaRulesClash = function (mediaRule1, mediaRule2) {
    return isEqualsSorted(mediaRule1, mediaRule2);
};
var doPseudoElementsClash = function (pseudoElements1, pseudoElements2) {
    return isEqualsSorted(pseudoElements1, pseudoElements2);
};
var overrideTailwindClasses = function (classNamesString, optionsArg) {
    if (optionsArg === void 0) { optionsArg = defaultOptions; }
    var options = __assign(__assign({}, defaultOptions), optionsArg);
    var classNames = classNamesString.split(/\s+/);
    return classNames
        .reduce(function (resultSoFar, className) {
        var classNameWithoutPrefix = className.startsWith(options.prefix) ? className.substring(options.prefix.length) : className;
        var tailwindCssRule = options.tailwindProperties[classNameWithoutPrefix] || { properties: [], pseudoElements: [] };
        var nonClashingClasses = resultSoFar.filter(function (r) {
            return (!doMediaRulesClash(r.tailwindCssRule.topLevelMediaRules, tailwindCssRule.topLevelMediaRules) ||
                !doPseudoElementsClash(r.tailwindCssRule.pseudoElements, tailwindCssRule.pseudoElements) ||
                !filterCssVariables(r.tailwindCssRule.properties).some(function (p) { return filterCssVariables(tailwindCssRule.properties).includes(p); }));
        });
        return __spreadArray(__spreadArray([], nonClashingClasses, true), [{ class: className, tailwindCssRule: tailwindCssRule }], false);
    }, [])
        .map(function (r) { return r.class; })
        .join(' ');
};
exports.overrideTailwindClasses = overrideTailwindClasses;
