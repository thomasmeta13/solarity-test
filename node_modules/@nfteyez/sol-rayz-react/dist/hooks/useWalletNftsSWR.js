"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useWalletNftsSWR = void 0;
var react_1 = require("react");
var swr_1 = __importDefault(require("swr"));
var sol_rayz_1 = require("@nfteyez/sol-rayz");
var fetcher_1 = require("../utils/fetcher");
/**
 * This hook is wrapper over `getParsedNftAccountsByOwner`
 * it fetches NFT list when wallet public address changes
 * and returns possible states: error, isLoading or list of NFT
 */
var useWalletNftsSWR = function (_a) {
    var publicAddress = _a.publicAddress, endpoint = _a.endpoint;
    var _b = (0, react_1.useState)(), error = _b[0], setError = _b[1];
    var _c = (0, react_1.useState)(), apiUrl = _c[0], setApiUrl = _c[1];
    (0, react_1.useEffect)(function () {
        var isValidAddress = (0, sol_rayz_1.isValidSolanaAddress)(publicAddress);
        if (!isValidAddress) {
            setError(new Error("Invalid address: " + publicAddress));
        }
        else {
            setError(undefined);
            var url = endpoint + "/" + publicAddress;
            setApiUrl(url);
        }
    }, [publicAddress]);
    var _d = (0, swr_1.default)(apiUrl, fetcher_1.fetcher, {
        revalidateIfStale: false,
        revalidateOnFocus: false,
        revalidateOnReconnect: false,
    }), nfts = _d.data, fetchError = _d.error;
    // update error object with fetch error if any
    (0, react_1.useEffect)(function () {
        if (fetchError) {
            setError(fetchError);
        }
    }, [fetchError]);
    return {
        nfts: nfts,
        error: error,
        isLoading: !nfts && !error,
    };
};
exports.useWalletNftsSWR = useWalletNftsSWR;
//# sourceMappingURL=useWalletNftsSWR.js.map