"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.overrideTailwindClasses = exports.findTailwindProperties = void 0;
var fastMemoize_1 = __importDefault(require("./vendor/fastMemoize"));
var rules_1 = require("./rules");
var defaultOptions = {
    prefix: '',
    jit: true,
    ruleLookupCache: true,
    ignoreCssVariables: true,
};
var isCssVariable = function (className) {
    return className.startsWith('--');
};
var findTailwindPropertiesRaw = function (className, options) {
    var _a, _b;
    return (_b = (_a = (0, rules_1.getRules)(options)
        .find(function (rule) { return rule.regex.test(className); })) === null || _a === void 0 ? void 0 : _a.properties) === null || _b === void 0 ? void 0 : _b.filter(function (property) { return !options.ignoreCssVariables || !isCssVariable(property); });
};
var findTailwindPropertiesMemoized = (0, fastMemoize_1.default)(findTailwindPropertiesRaw);
var findTailwindProperties = function (className, options) {
    if (options === void 0) { options = defaultOptions; }
    return options.ruleLookupCache ? findTailwindPropertiesMemoized(className, options) : findTailwindPropertiesRaw(className, options);
};
exports.findTailwindProperties = findTailwindProperties;
var tailWindPremableEndIndex = function (className) { return className.lastIndexOf(':'); };
// Premable example: 'md:focus:'
var tailWindPremable = function (className) {
    var index = tailWindPremableEndIndex(className);
    return index === -1 ? '' : className.substring(0, index);
};
var stripTailwindPremable = function (className) {
    return className.substring(tailWindPremableEndIndex(className) + 1);
};
var stripTailwindImportant = function (className) {
    return className.replace(/^!/g, '');
};
// Strip tailwind's /25 opacity at the end of the className
// other examples: /[0.35]
var stripTailwindOpacity = function (className) {
    return className.replace(/\/(\d|\.|\[|\])+$/g, '');
};
var stripeTailwindJit = function (className) {
    return stripTailwindOpacity(stripTailwindImportant(className));
};
var getTailwindClassName = function (className, options) {
    var strippedClassName = stripTailwindPremable(className);
    return options.jit ? stripeTailwindJit(strippedClassName) : strippedClassName;
};
var isTailwindClash = function (classA, classB, options) {
    var premableA = tailWindPremable(classA);
    var premableB = tailWindPremable(classB);
    var classAProperties = (0, exports.findTailwindProperties)(getTailwindClassName(classA, options), options);
    var classBProperties = (0, exports.findTailwindProperties)(getTailwindClassName(classB, options), options);
    return classAProperties && classBProperties && premableA === premableB && classAProperties.some(function (property) { return classBProperties.includes(property); });
};
var overrideTailwindClasses = function (classNamesString, optionsArgs) {
    if (optionsArgs === void 0) { optionsArgs = defaultOptions; }
    var options = __assign(__assign({}, defaultOptions), optionsArgs);
    var classNames = classNamesString.split(/\s+/);
    return classNames
        .reduce(function (resultSoFar, className) {
        var nonClashingClasses = resultSoFar.filter(function (r) { return !isTailwindClash(className, r, options); });
        return __spreadArray(__spreadArray([], nonClashingClasses, true), [className], false);
    }, [])
        .join(' ');
};
exports.overrideTailwindClasses = overrideTailwindClasses;
