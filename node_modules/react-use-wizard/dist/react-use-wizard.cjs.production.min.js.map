{"version":3,"file":"react-use-wizard.cjs.production.min.js","sources":["../src/wizardContext.ts","../src/wizard.tsx","../src/useWizard.ts"],"sourcesContent":["import * as React from 'react';\n\nimport { WizardValues } from './types';\n\nconst WizardContext = React.createContext<WizardValues | null>(null);\n\nif (__DEV__) {\n  WizardContext.displayName = 'WizardContext';\n}\n\nexport default WizardContext;\n","import * as React from 'react';\n\nimport * as logger from './logger';\nimport { Handler, WizardProps } from './types';\nimport WizardContext from './wizardContext';\n\nconst Wizard: React.FC<WizardProps> = React.memo(\n  ({ header, footer, children, startIndex = 0 }) => {\n    const [activeStep, setActiveStep] = React.useState(startIndex);\n    const [isLoading, setIsLoading] = React.useState(false);\n    const hasNextStep = React.useRef(true);\n    const hasPreviousStep = React.useRef(false);\n    const nextStepHandler = React.useRef<Handler>(() => {});\n    const stepCount = React.Children.toArray(children).length;\n\n    hasNextStep.current = activeStep < stepCount - 1;\n    hasPreviousStep.current = activeStep > 0;\n\n    const goToNextStep = React.useRef(() => {\n      if (hasNextStep.current) {\n        setActiveStep((activeStep) => activeStep + 1);\n      }\n    });\n\n    const goToPreviousStep = React.useRef(() => {\n      if (hasPreviousStep.current) {\n        nextStepHandler.current = null;\n        setActiveStep((activeStep) => activeStep - 1);\n      }\n    });\n\n    const goToStep = React.useRef((stepIndex: number) => {\n      if (stepIndex >= 0 && stepIndex < stepCount) {\n        nextStepHandler.current = null;\n        setActiveStep(stepIndex);\n      } else {\n        if (__DEV__) {\n          logger.log(\n            'warn',\n            [\n              `Invalid step index [${stepIndex}] passed to 'goToStep'. `,\n              `Ensure the given stepIndex is not out of boundaries.`,\n            ].join(''),\n          );\n        }\n      }\n    });\n\n    // Callback to attach the step handler\n    const handleStep = React.useRef((handler: Handler) => {\n      nextStepHandler.current = handler;\n    });\n\n    const doNextStep = React.useRef(async () => {\n      if (hasNextStep.current && nextStepHandler.current) {\n        try {\n          setIsLoading(true);\n          await nextStepHandler.current();\n          setIsLoading(false);\n          nextStepHandler.current = null;\n          goToNextStep.current();\n        } catch (error) {\n          setIsLoading(false);\n          throw error;\n        }\n      } else {\n        goToNextStep.current();\n      }\n    });\n\n    const wizardValue = React.useMemo(\n      () => ({\n        nextStep: doNextStep.current,\n        previousStep: goToPreviousStep.current,\n        handleStep: handleStep.current,\n        isLoading,\n        activeStep,\n        stepCount,\n        isFirstStep: !hasPreviousStep.current,\n        isLastStep: !hasNextStep.current,\n        goToStep: goToStep.current,\n      }),\n      [activeStep, stepCount, isLoading],\n    );\n\n    const activeStepContent = React.useMemo(() => {\n      const reactChildren = React.Children.toArray(children);\n\n      if (__DEV__) {\n        // No steps passed\n        if (reactChildren.length === 0) {\n          logger.log(\n            'warn',\n            'Make sure to pass your steps as children in your <Wizard>',\n          );\n        }\n        // The passed start index is invalid\n        if (activeStep > reactChildren.length) {\n          logger.log('warn', 'An invalid startIndex is passed to <Wizard>');\n        }\n        // Invalid header element\n        if (header && !React.isValidElement(header)) {\n          logger.log('error', 'Invalid header passed to <Wizard>');\n        }\n        // Invalid footer element\n        if (footer && !React.isValidElement(footer)) {\n          logger.log('error', 'Invalid footer passed to <Wizard>');\n        }\n      }\n\n      return reactChildren[activeStep];\n    }, [activeStep, children, header, footer]);\n\n    return (\n      <WizardContext.Provider value={wizardValue}>\n        {header}\n        {activeStepContent}\n        {footer}\n      </WizardContext.Provider>\n    );\n  },\n);\n\nexport default Wizard;\n","import * as React from 'react';\n\nimport { WizardValues } from './types';\nimport WizardContext from './wizardContext';\n\nconst useWizard = () => {\n  const context = React.useContext(WizardContext);\n\n  if (!context && __DEV__) {\n    throw Error('Wrap your step with `Wizard`');\n  } else {\n    return context as WizardValues;\n  }\n};\n\nexport default useWizard;\n"],"names":["WizardContext","React","header","footer","children","startIndex","activeStep","setActiveStep","isLoading","setIsLoading","hasNextStep","hasPreviousStep","nextStepHandler","stepCount","toArray","length","current","goToNextStep","goToPreviousStep","goToStep","stepIndex","handleStep","handler","doNextStep","async","error","wizardValue","nextStep","previousStep","isFirstStep","isLastStep","activeStepContent","Provider","value"],"mappings":"2FAIA,MAAMA,EAAgBC,gBAAyC,qBCEzBA,OACpC,EAAGC,OAAAA,EAAQC,OAAAA,EAAQC,SAAAA,EAAUC,WAAAA,EAAa,YACjCC,EAAYC,GAAiBN,WAAeI,IAC5CG,EAAWC,GAAgBR,YAAe,GAC3CS,EAAcT,UAAa,GAC3BU,EAAkBV,UAAa,GAC/BW,EAAkBX,SAAsB,QACxCY,EAAYZ,WAAea,QAAQV,GAAUW,OAEnDL,EAAYM,QAAUV,EAAaO,EAAY,EAC/CF,EAAgBK,QAAUV,EAAa,QAEjCW,EAAehB,SAAa,KAC5BS,EAAYM,SACdT,EAAeD,GAAeA,EAAa,KAIzCY,EAAmBjB,SAAa,KAChCU,EAAgBK,UAClBJ,EAAgBI,QAAU,KAC1BT,EAAeD,GAAeA,EAAa,MAIzCa,EAAWlB,SAAcmB,IACzBA,GAAa,GAAKA,EAAYP,IAChCD,EAAgBI,QAAU,KAC1BT,EAAca,MAeZC,EAAapB,SAAcqB,IAC/BV,EAAgBI,QAAUM,IAGtBC,EAAatB,SAAauB,aAC1Bd,EAAYM,SAAWJ,EAAgBI,YAEvCP,GAAa,SACPG,EAAgBI,UACtBP,GAAa,GACbG,EAAgBI,QAAU,KAC1BC,EAAaD,UACb,MAAOS,SACPhB,GAAa,GACPgB,OAGRR,EAAaD,YAIXU,EAAczB,UAClB,MACE0B,SAAUJ,EAAWP,QACrBY,aAAcV,EAAiBF,QAC/BK,WAAYA,EAAWL,QACvBR,UAAAA,EACAF,WAAAA,EACAO,UAAAA,EACAgB,aAAclB,EAAgBK,QAC9Bc,YAAapB,EAAYM,QACzBG,SAAUA,EAASH,UAErB,CAACV,EAAYO,EAAWL,IAGpBuB,EAAoB9B,UAAc,IAChBA,WAAea,QAAQV,GAwBxBE,GACpB,CAACA,EAAYF,EAAUF,EAAQC,WAGhCF,gBAACD,EAAcgC,UAASC,MAAOP,GAC5BxB,EACA6B,EACA5B,uBChHS,IACAF,aAAiBD"}